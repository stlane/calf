{
    "collab_server" : "",
    "contents" : "#'@title calf\n#'@description Coarse approximation linear function\n#'@param data Matrix or data frame. First column must contain case/control dummy coded variable (if targetVector = \"binary\"). Otherwise, first column must contain real number vector corresponding to selection variable (if targetVector = \"real\"). All other columns contain relevant markers.\n#'@param nMarkers Maximum number of markers to include in creation of sum.\n#'@param targetVector Indicate \"binary\" for target vector with two options (e.g., case/control). Indicate \"real\" for target vector with real numbers.\n#'@param margin Real number from 0 to 1. Indicates the amount a potential marker must improve the target criterion (Pearson correlation or p-value) in order to add the marker.\n#'@param optimize Criteria to optimize if targetVector = \"binary.\" Indicate \"pval\" to optimize the p-value corresponding to the t-test distinguishing case and control. Indicate \"auc\" to optimize the AUC.\n#'@param verbose Logical. Indicate TRUE to print activity at each iteration to console. Defaults to FALSE.\n#'@return A data frame containing the chosen markers and their assigned weight (-1 or 1)\n#'@return The AUC value for the classification\n#'@return rocPlot. A plot object from ggplot2 for the receiver operating curve.\n#'@examples\n#'calf(data = CaseControl, nMarkers = 6, targetVector = \"binary\")\n#'@export\ncalf <- function(data,\n                 nMarkers,\n                 targetVector,\n                 margin,\n                 optimize = \"pval\",\n                # reverse = FALSE,\n                 verbose = FALSE){\n  calf_internal(data,\n                nMarkers,\n                proportion = NULL,\n                randomize  = FALSE,\n                targetVector = targetVector,\n                times      = 1,\n                margin = NULL,\n                optimize = optimize,\n               # reverse = reverse,\n                verbose = verbose)\n}\n\n\n#'@title calf_randomize\n#'@description Coarse approximation linear function, randomized\n#'@param data Matrix or data frame. First column must contain case/control dummy coded variable (if targetVector = \"binary\"). Otherwise, first column must contain real number vector corresponding to selection variable (if targetVector = \"real\"). All other columns contain relevant markers.\n#'@param nMarkers Maximum number of markers to include in creation of sum.\n#'@param randomize Logical. Indicate TRUE to randomize the case/control status (or real number vector) for each individual. Used to compare results from true data with results from randomized data.\n#'@param targetVector Indicate \"binary\" for target vector with two options (e.g., case/control). Indicate \"real\" for target vector with real numbers.\n#'@param times Numeric. Indicates the number of replications to run with randomization.\n#'@param margin Real number from 0 to 1. Indicates the amount a potential marker must improve the target criterion (Pearson correlation or p-value) in order to add the marker.\n#'@param optimize Criteria to optimize if targetVector = \"binary.\" Indicate \"pval\" to optimize the p-value corresponding to the t-test distinguishing case and control. Indicate \"auc\" to optimize the AUC.\n#'@param verbose Logical. Indicate TRUE to print activity at each iteration to console. Defaults to FALSE.\n#'@return A data frame containing the chosen markers and their assigned weight (-1 or 1)\n#'@return The AUC value for the classification\n#'@return aucHist A histogram of the AUCs across replications.\n#'@examples\n#'calf_randomize(data = CaseControl, nMarkers = 6, targetVector = \"binary\", times = 5)\n#'@export\ncalf_randomize <- function(data,\n                           nMarkers,\n                           randomize  = TRUE,\n                           targetVector,\n                           times      = 1,\n                           margin     = NULL,\n                           optimize   = \"pval\",\n                           #reverse = FALSE,\n                           verbose = FALSE){\n  auc        <- numeric()\n  finalBest  <- numeric()\n  allMarkers <- character()\n  count      <- 1\n  AUC = NULL\n  repeat {\n    out <- calf_internal(data,\n                         nMarkers,\n                         proportion = NULL,\n                         randomize  = randomize,\n                         targetVector = targetVector,\n                         times,\n                         margin = margin,\n                         optimize = optimize,\n                        # reverse = reverse,\n                         verbose = verbose)\n    auc[count] <- out$auc\n    selection  <- out$selection\n    markers    <- as.character(out$selection[,1])\n    finalBest  <- append(finalBest, out$finalBest)\n    allMarkers <- as.character((append(allMarkers, markers)))\n    if (count == times) break\n    count      <- count + 1\n  }\n\n  if (times > 1) {\n    summaryMarkers <- as.data.frame(table(allMarkers), check.names = FALSE)\n    colnames(summaryMarkers) <- c(\"Marker\", \"Frequency\")\n    summaryMarkers <- summaryMarkers[order(-summaryMarkers$Frequency),]\n    if (targetVector == \"binary\"){\n    auc            <- as.data.frame(auc)\n    colnames(auc)  <- \"AUC\"\n    aucHist <- ggplot(auc, aes(AUC)) +\n      geom_histogram() +\n      ylab(\"Count\") +\n      xlab(\"AUC\") +\n      scale_x_continuous() +\n      theme_bw()\n    } else aucHist = NULL\n  } else {\n    summaryMarkers = NULL\n    aucHist        = NULL\n  }\n  if (times == 1 & targetVector == \"binary\") {\n    rocPlot <- out$rocPlot\n  } else {\n    rocPlot <- NULL\n  }\n\n  est       <- list(selection  = selection,\n                    multiple   = summaryMarkers,\n                    auc        = auc,\n                    randomize  = randomize,\n                    targetVec  = targetVector,\n                    aucHist    = aucHist,\n                    times      = times,\n                    finalBest  = finalBest,\n                    rocPlot    = rocPlot,\n                    optimize   = optimize,\n                   # reverse    = reverse,\n                    verbose    = verbose)\n  class(est) <- \"calf_randomize\"\n  return(est)\n}\n\n\n#'@title calf_subset\n#'@description Coarse approximation linear function, randomized\n#'@param data Matrix or data frame. First column must contain case/control dummy coded variable (if targetVector = \"binary\"). Otherwise, first column must contain real number vector corresponding to selection variable (if targetVector = \"real\"). All other columns contain relevant markers.\n#'@param nMarkers Maximum number of markers to include in creation of sum.\n#'@param proportion Numeric. A value (where 0 < proportion <= 1) indicating the proportion of cases and controls to use in analysis (if targetVector = \"binary\"). If targetVector = \"real\", this is just a proportion of the full sample. Used to evaluate robustness of solution. Defaults to 0.8.\n#'@param targetVector Indicate \"binary\" for target vector with two options (e.g., case/control). Indicate \"real\" for target vector with real numbers.\n#'@param times Numeric. Indicates the number of replications to run with randomization.\n#'@param margin Real number from 0 to 1. Indicates the amount a potential marker must improve the target criterion (Pearson correlation or p-value) in order to add the marker.\n#'@param optimize Criteria to optimize if targetVector = \"binary.\" Indicate \"pval\" to optimize the p-value corresponding to the t-test distinguishing case and control. Indicate \"auc\" to optimize the AUC.\n#'@param verbose Logical. Indicate TRUE to print activity at each iteration to console. Defaults to FALSE.\n#'@return A data frame containing the chosen markers and their assigned weight (-1 or 1)\n#'@return The AUC value for the classification. If multiple replications are requested, this will be a data.frame containing all AUCs across replications.\n#'@return aucHist A histogram of the AUCs across replications.\n#'@examples\n#'calf_subset(data = CaseControl, nMarkers = 6, targetVector = \"binary\", times = 5)\n#'@export\n\ncalf_subset <- function(data,\n                        nMarkers,\n                        proportion = .8,\n                        targetVector,\n                        times      = 1,\n                        margin = NULL,\n                        optimize = \"pval\",\n                       # reverse = FALSE,\n                        verbose = FALSE){\n  auc        <- numeric()\n  allMarkers <- character()\n  finalBest  <- numeric()\n  count      <- 1\n  AUC = NULL\n  repeat {\n    out <- calf_internal(data,\n                         nMarkers,\n                         proportion = proportion,\n                         randomize  = FALSE,\n                         targetVector = targetVector,\n                         times,\n                         margin = margin,\n                         optimize = optimize,\n                       #  reverse = reverse,\n                         verbose = verbose)\n    auc[count] <- out$auc\n    selection  <- out$selection\n    finalBest  <- append(finalBest, out$finalBest)\n    markers    <- as.character(out$selection[,1])\n    allMarkers <- as.character((append(allMarkers, markers)))\n    if (count == times) break\n    count      <- count + 1\n  }\n\n  if (times > 1){\n    summaryMarkers <- as.data.frame(table(allMarkers), check.names = FALSE)\n    colnames(summaryMarkers) <- c(\"Marker\", \"Frequency\")\n    summaryMarkers <- summaryMarkers[order(-summaryMarkers$Frequency),]\n    if (targetVector == \"binary\"){\n    auc            <- as.data.frame(auc)\n    colnames(auc)  <- \"AUC\"\n    aucHist <- ggplot(auc, aes(AUC)) +\n      geom_histogram() +\n      ylab(\"Count\") +\n      xlab(\"AUC\") +\n      scale_x_continuous() +\n      theme_bw()\n    } else aucHist = NULL\n  } else {\n    summaryMarkers = NULL\n    aucHist        = NULL\n  }\n  if (times == 1 & targetVector == \"binary\") {\n    rocPlot <- out$rocPlot\n  } else {\n    rocPlot <- NULL\n  }\n\n  est       <- list(selection  = selection,\n                    multiple   = summaryMarkers,\n                    auc        = auc,\n                    proportion = proportion,\n                    targetVec  = targetVector,\n                    aucHist    = aucHist,\n                    times      = times,\n                    finalBest  = finalBest,\n                    rocPlot    = rocPlot,\n                    optimize   = optimize)\n  class(est) <- \"calf_subset\"\n  return(est)\n}\n\n\n\n",
    "created" : 1493319017588.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1395875645",
    "id" : "8B3F9DBB",
    "lastKnownWriteTime" : 1495205118,
    "last_content_update" : 1495205118227,
    "path" : "C:/Users/stlane/Dropbox/Current Consulting/clark jeffries/CALF/calf_git/R/calf_wrappers.R",
    "project_path" : "R/calf_wrappers.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}